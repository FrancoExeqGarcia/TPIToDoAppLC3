{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\TPIToDoAppLC3\\\\todoapp\\\\src\\\\Components\\\\todos\\\\Todos.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport TodoForm from \"../todoForm/TodoForm\";\nimport TodoCard from \"../todoCard/TodoCard\";\nimport EditTodo from \"../editTodo/EditTodo\"; // Importa el nuevo componente EditTodo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Todos() {\n  _s();\n  // Estado para almacenar la lista de tareas\n  const [tasks, setTasks] = useState([]);\n  const [editingTask, setEditingTask] = useState(null); // Estado para rastrear la tarea en edición\n\n  // Función para agregar una nueva tarea a la lista\n  const addTask = newTask => {\n    setTasks([...tasks, newTask]);\n  };\n\n  // Función para eliminar una tarea de la lista por su índice\n  const deleteTask = index => {\n    const updatedTasks = [...tasks];\n    updatedTasks.splice(index, 1);\n    setTasks(updatedTasks);\n  };\n\n  // Función para marcar una tarea como completada\n  const markTaskAsCompleted = taskId => {\n    const updatedTasks = tasks.map(task => task.id === taskId ? {\n      ...task,\n      isCompleted: !task.isCompleted\n    } : task);\n    setTasks(updatedTasks);\n  };\n\n  // Función para eliminar tareas completadas\n  const deleteCompletedTasks = () => {\n    const incompleteTasks = tasks.filter(task => !task.isCompleted);\n    setTasks(incompleteTasks);\n  };\n\n  // Función para editar una tarea\n  const editTask = task => {\n    if (!task.isCompleted) {\n      setEditingTask(task);\n    }\n  };\n\n  // Función para guardar los cambios editados de una tarea\n  const saveEditedTask = editedTask => {\n    const updatedTasks = tasks.map(task => task.id === editedTask.id ? editedTask : task);\n    setTasks(updatedTasks);\n    setEditingTask(null); // Sale del modo de edición\n  };\n\n  // Función para cancelar la edición de una tarea\n  const cancelEdit = () => {\n    setEditingTask(null); // Sale del modo de edición\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mt-5\",\n      children: \"Lista de Tareas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      onAddTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-4\",\n      children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        lg: 4,\n        className: \"mb-3\",\n        children: editingTask === task ? /*#__PURE__*/_jsxDEV(EditTodo, {\n          task: task,\n          onUpdateTask: saveEditedTask,\n          onCancel: cancelEdit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(TodoCard, {\n          task: task,\n          onDeleteTask: () => deleteTask(index),\n          onEditTask: editTask,\n          onMarkAsCompleted: markTaskAsCompleted // Pasa la función de marca como completada\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        onClick: deleteCompletedTasks,\n        children: \"Eliminar Completadas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Todos, \"9BOFjMjrfERsPs4CY/Ncy4skW8M=\");\n_c = Todos;\nexport default Todos;\nvar _c;\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","useState","Container","Row","Col","Button","TodoForm","TodoCard","EditTodo","jsxDEV","_jsxDEV","Todos","_s","tasks","setTasks","editingTask","setEditingTask","addTask","newTask","deleteTask","index","updatedTasks","splice","markTaskAsCompleted","taskId","map","task","id","isCompleted","deleteCompletedTasks","incompleteTasks","filter","editTask","saveEditedTask","editedTask","cancelEdit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","xs","md","lg","onUpdateTask","onCancel","onDeleteTask","onEditTask","onMarkAsCompleted","variant","onClick","_c","$RefreshReg$"],"sources":["C:/repos/TPIToDoAppLC3/todoapp/src/Components/todos/Todos.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport TodoForm from \"../todoForm/TodoForm\";\r\nimport TodoCard from \"../todoCard/TodoCard\";\r\nimport EditTodo from \"../editTodo/EditTodo\"; // Importa el nuevo componente EditTodo\r\n\r\nfunction Todos() {\r\n  // Estado para almacenar la lista de tareas\r\n  const [tasks, setTasks] = useState([]);\r\n  const [editingTask, setEditingTask] = useState(null); // Estado para rastrear la tarea en edición\r\n\r\n  // Función para agregar una nueva tarea a la lista\r\n  const addTask = (newTask) => {\r\n    setTasks([...tasks, newTask]);\r\n  };\r\n\r\n  // Función para eliminar una tarea de la lista por su índice\r\n  const deleteTask = (index) => {\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks.splice(index, 1);\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Función para marcar una tarea como completada\r\n  const markTaskAsCompleted = (taskId) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.id === taskId\r\n        ? {\r\n            ...task,\r\n            isCompleted: !task.isCompleted,\r\n          }\r\n        : task\r\n    );\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Función para eliminar tareas completadas\r\n  const deleteCompletedTasks = () => {\r\n    const incompleteTasks = tasks.filter((task) => !task.isCompleted);\r\n    setTasks(incompleteTasks);\r\n  };\r\n\r\n  // Función para editar una tarea\r\n  const editTask = (task) => {\r\n    if (!task.isCompleted) {\r\n      setEditingTask(task);\r\n    }\r\n  };\r\n\r\n  // Función para guardar los cambios editados de una tarea\r\n  const saveEditedTask = (editedTask) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.id === editedTask.id ? editedTask : task\r\n    );\r\n    setTasks(updatedTasks);\r\n    setEditingTask(null); // Sale del modo de edición\r\n  };\r\n\r\n  // Función para cancelar la edición de una tarea\r\n  const cancelEdit = () => {\r\n    setEditingTask(null); // Sale del modo de edición\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className=\"mt-5\">Lista de Tareas</h1>\r\n\r\n      {/* Pasa la función addTask como prop a TodoForm */}\r\n      <TodoForm onAddTask={addTask} />\r\n\r\n      <Row className=\"mt-4\">\r\n        {/* Renderiza cada tarea utilizando TodoCard o EditTodo según corresponda */}\r\n        {tasks.map((task, index) => (\r\n          <Col key={index} xs={12} md={6} lg={4} className=\"mb-3\">\r\n            {editingTask === task ? (\r\n              <EditTodo\r\n                task={task}\r\n                onUpdateTask={saveEditedTask}\r\n                onCancel={cancelEdit}\r\n              />\r\n            ) : (\r\n              <TodoCard\r\n                task={task}\r\n                onDeleteTask={() => deleteTask(index)}\r\n                onEditTask={editTask}\r\n                onMarkAsCompleted={markTaskAsCompleted} // Pasa la función de marca como completada\r\n              />\r\n            )}\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n\r\n      <div className=\"mt-3\">\r\n        {/* Botón para eliminar tareas completadas */}\r\n        <Button variant=\"danger\" onClick={deleteCompletedTasks}>\r\n          Eliminar Completadas\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Todos;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}